name: Quarkus Native CI/CD workflow
on: [ push, workflow_dispatch ]

env:
  REGISTRY_USER: jfalkner1
  IMAGE_REGISTRY: quay.io
  TEST_NAMESPACE: jfalkner1-dev
  APP_NAME: quarkus-actions-demo
  APP_PORT: 8080
  TEAR_DOWN: false

jobs:
  #####################################################################################################################
  ## The compile job compiles the application into a native executable, and uploads it as an artifact for the next job to use.
  compile:
    name: Compile
    runs-on: ubuntu-20.04
    outputs:
      binname: ${{ steps.get-binname.outputs.binname }}
      commit_sha: ${{ steps.commit-data.outputs.short_sha }}
    env:
      TARGET_DIR: target/
      MVN_REPO_DIR: ~/.m2/repository
    steps:
    - uses: actions/checkout@v2

    # If none of these files has changed, we assume that the contents of .m2/repository can be fetched from the cache.
    - name: Hash Maven files
      run: |
        echo "MVN_HASH=${{ hashFiles('pom.xml', '.mvn/**/*', 'mvnw*') }}" >> $GITHUB_ENV

    # Download the m2 repository from the cache to speed up the build.
    - name: Check for Maven cache
      id: check-mvn-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.MVN_REPO_DIR }}
        key: ${{ env.MVN_HASH }}

    - name: Download Mandrel
      run: |
        download_url="https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.2.0/graalvm-ce-java11-linux-amd64-21.2.0.tar.gz"
        wget -O $RUNNER_TEMP/java_package.tar.gz $download_url

    - uses: actions/setup-java@v2
      with:
        distribution: 'jdkfile'
        jdkFile: ${{ runner.temp }}/java_package.tar.gz
        java-version: '11.0.0'
        architecture: x64

    - name: Setup Mandrel
      run: |
        sudo apt install g++ zlib1g-dev libfreetype6-dev && gu install native-image

    - run: java -version

    - run: mvn -ntp -B package -DskipTests -Pnative

    # If there was no cache hit above, store the output into the cache now.
    - name: Save Maven repo into cache
      if: ${{ steps.check-mvn-cache.outputs.cache-hit }} != 'true'
      uses: actions/cache@v2
      with:
        path: ${{ env.MVN_REPO_DIR }}
        key: ${{ env.MVN_HASH }}

    # Store the output native binary into the env for reuse below.
    # It will contain, eg. "quarkus-actions-demo-1.0.0-SNAPSHOT-runner"
    - name: Get bin filename
      id: get-binname
      run: |
        export BIN_NAME="$(basename $(ls target/*-runner))"
        echo "Quarkus native executable is $BIN_NAME"
        echo "::set-output name=binname::$BIN_NAME"
        echo "BIN_NAME=$BIN_NAME" >> $GITHUB_ENV

    # Upload the bin for future jobs to use.
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.BIN_NAME }}
        path: ${{ env.TARGET_DIR }}/${{ env.BIN_NAME }}
        if-no-files-found: error

    # Use the commit short-sha as the suffix of the app_name
    - name: Get commit short-sha
      id: commit-data
      uses: redhat-actions/common/commit-data@v1

  #####################################################################################################################
  ## The build and push image job builds the container image with the quarkus app in it,
  ## and pushes it to an image registry.
  ## It outputs the image tag and image URL for the next step to use when deploying to the OpenShift cluster.
  build-push-image:
    name: Build and Push to Quay
    runs-on: ubuntu-20.04
    needs: compile
    outputs:
      registry-path: ${{ steps.push-to-quay.outputs.registry-path }}
    env:
      BIN_NAME: ${{ needs.compile.outputs.binname }}
      IMAGE_TAGS: latest ${{ needs.compile.outputs.commit_sha }}
    steps:
      # Download the jar artifact from the compile step
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.BIN_NAME }}

      - run: chmod a+x /${{ env.BIN_NAME }}

      # Use buildah to build the application image with the jar inside.
      - name: Build Image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.APP_NAME }}
          tags: ${{ env.IMAGE_TAGS }}
          oci: true
          base-image: registry.access.redhat.com/ubi8/ubi-minimal
          content: ${{ env.BIN_NAME }}
          entrypoint: |
            /${{ env.BIN_NAME }}
          port: ${{ env.CONTAINER_PORT }}

      # Push the built image to our image registry so it can be pulled into the OpenShift cluster.
      - name: Push to Quay
        id: push-to-quay
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}/${{ env.REGISTRY_USER }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

  #####################################################################################################################
  ## The OpenShift Deploy step deploys the image that was created above into our OpenShift cluster, using helm.
  ## It can then run any integration tests before deleting the resources that were created.
  openshift-deploy:
    name: Deploy on OpenShift
    runs-on: ubuntu-20.04
    needs: [ build-push-image, compile ]
    env:
      IMAGE_PATH: ${{ needs.build-push-image.outputs.registry-path }}
      COMMIT_SHA: ${{ needs.compile.outputs.commit_sha }}

    steps:
      - uses: actions/checkout@v2

      # Log into the OpenShift cluster using the secrets configured in the repository settings.
      # The GitHub Ubuntu runners have oc pre-installed.
      # If you're not using those runners, be sure to check out https://github.com/redhat-actions/oc-installer.
      - name: OpenShift login
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          # openshift_username:
          # openshift_password:
          insecure_skip_tls_verify: true
          namespace: ${{ env.TEST_NAMESPACE }}

      # Deploy our sample application with oc.
      # This will take down all old deployments before creating a new deployment
      - name: Deploy and expose app
        id: oc-new-app
        uses: redhat-actions/oc-new-app@v1
        with:
          app_name: ${{ env.APP_NAME }}
          port: ${{ env.APP_PORT }}
          namespace: ${{ env.TEST_NAMESPACE }}
          image: ${{ env.IMAGE_PATH }}

      # Perform a (very) basic integration test.
      # This step is retried since the time to pull the image and start the pod can vary.
      - name: Test project is running
        id: test-project
        uses: nick-invision/retry@v2.2.0
        with:
          timeout_seconds: 3
          retry_wait_seconds: 10
          max_attempts: 30
          warning_on_retry: false
          # Just check that the root endpoint returns a success status (-f flag).
          command: curl -sSfLi ${{ steps.oc-new-app.outputs.route }}

      # Clean up the resources we deployed, even if there was an error above.
      - name: Delete deployment that was created
        if: always() && env.TEAR_DOWN == 'true'
        run:
          oc delete all --selector=${{ steps.oc-new-app.outputs.selector }}